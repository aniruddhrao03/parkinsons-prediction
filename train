{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM4PSxMndxXjewhzfHZGq6R",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/aniruddhrao03/trafficsignclassification/blob/main/train\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "N6ydJ1SPblMX"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import urllib\n",
        "import zipfile\n",
        "import tensorflow as tf\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn\n",
        "import pickle\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "url = 'http://storage.googleapis.com/download.tensorflow.org/data/certificate/germantrafficsigns.zip'\n",
        "urllib.request.urlretrieve(url, 'germantrafficsigns.zip')\n",
        "with zipfile.ZipFile('germantrafficsigns.zip', 'r') as zip_ref:\n",
        "  zip_ref.extractall()"
      ],
      "metadata": {
        "id": "7A6a6oDjd7Sd"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "BATCH_SIZE = 32\n",
        "IMG_SIZE = (30, 30)"
      ],
      "metadata": {
        "id": "n87Il_xPiNy0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Data Augmentation for training\n",
        "train_datagen = ImageDataGenerator(\n",
        "    rescale=1./255,\n",
        "    rotation_range=10,\n",
        "    width_shift_range=0.1,\n",
        "    height_shift_range=0.1,\n",
        "    shear_range=0.1,\n",
        "    zoom_range=0.2,\n",
        "    horizontal_flip=False,\n",
        "    fill_mode='nearest'\n",
        ")"
      ],
      "metadata": {
        "id": "9-eTE4F8iQbC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Normalization for validation\n",
        "val_datagen = ImageDataGenerator(rescale=1./255)"
      ],
      "metadata": {
        "id": "WxsXsjkvio5C"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Adjust the directory paths here\n",
        "train_directory = '/content/train'\n",
        "val_directory = '/content/validation'  # Update this path if your validation data is in a different location\n"
      ],
      "metadata": {
        "id": "CuRz9bD_eHPX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load Training and Validation datasets\n",
        "train_ds = train_datagen.flow_from_directory(\n",
        "    train_directory,\n",
        "    target_size=IMG_SIZE,\n",
        "    batch_size=BATCH_SIZE,\n",
        "    class_mode='categorical')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H-fjhga4guSO",
        "outputId": "ae640dbb-225c-4bb3-88db-9f8421fcf47c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 31367 images belonging to 43 classes.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "val_ds = val_datagen.flow_from_directory(\n",
        "    val_directory,\n",
        "    target_size=IMG_SIZE,\n",
        "    batch_size=BATCH_SIZE,\n",
        "    class_mode='categorical')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "38P9ATrNjdUB",
        "outputId": "5f8f0990-1130-4e71-b789-c9e1f894da18"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 7842 images belonging to 43 classes.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Model architecture\n",
        "model = tf.keras.models.Sequential([\n",
        "    Conv2D(32, (3, 3), activation='relu', input_shape=(30, 30, 3)),\n",
        "    BatchNormalization(),\n",
        "    MaxPooling2D(2, 2),\n",
        "    Conv2D(64, (3, 3), activation='relu'),\n",
        "    BatchNormalization(),\n",
        "    MaxPooling2D(2, 2),\n",
        "    Conv2D(128, (3, 3), activation='relu'),\n",
        "    BatchNormalization(),\n",
        "    MaxPooling2D(2, 2),\n",
        "    Flatten(),\n",
        "    Dense(256, activation='relu'),\n",
        "    Dropout(0.5),\n",
        "    Dense(43, activation='softmax')\n",
        "])"
      ],
      "metadata": {
        "id": "8oiD1Y0ajfjX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Compile the model\n",
        "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "__iWbvgLjiTB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Callbacks\n",
        "early_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5)"
      ],
      "metadata": {
        "id": "FIXH22I4jlOu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(train_ds, epochs=30, validation_data=val_ds, callbacks=[early_stopping])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qTJ2TLS1j-6m",
        "outputId": "ed252224-347d-4109-f75b-849062eeecf7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/30\n",
            "981/981 [==============================] - 105s 104ms/step - loss: 1.5535 - accuracy: 0.5517 - val_loss: 0.4556 - val_accuracy: 0.8374\n",
            "Epoch 2/30\n",
            "981/981 [==============================] - 98s 100ms/step - loss: 0.5025 - accuracy: 0.8366 - val_loss: 0.1428 - val_accuracy: 0.9573\n",
            "Epoch 3/30\n",
            "981/981 [==============================] - 102s 104ms/step - loss: 0.3336 - accuracy: 0.8922 - val_loss: 0.1758 - val_accuracy: 0.9413\n",
            "Epoch 4/30\n",
            "981/981 [==============================] - 97s 99ms/step - loss: 0.2691 - accuracy: 0.9140 - val_loss: 0.0871 - val_accuracy: 0.9713\n",
            "Epoch 5/30\n",
            "981/981 [==============================] - 97s 99ms/step - loss: 0.2244 - accuracy: 0.9289 - val_loss: 0.0732 - val_accuracy: 0.9758\n",
            "Epoch 6/30\n",
            "981/981 [==============================] - 97s 99ms/step - loss: 0.2133 - accuracy: 0.9335 - val_loss: 0.0764 - val_accuracy: 0.9746\n",
            "Epoch 7/30\n",
            "981/981 [==============================] - 98s 100ms/step - loss: 0.1833 - accuracy: 0.9434 - val_loss: 0.1045 - val_accuracy: 0.9670\n",
            "Epoch 8/30\n",
            "981/981 [==============================] - 99s 101ms/step - loss: 0.1612 - accuracy: 0.9484 - val_loss: 0.0674 - val_accuracy: 0.9793\n",
            "Epoch 9/30\n",
            "981/981 [==============================] - 98s 100ms/step - loss: 0.1504 - accuracy: 0.9541 - val_loss: 0.0601 - val_accuracy: 0.9818\n",
            "Epoch 10/30\n",
            "981/981 [==============================] - 102s 104ms/step - loss: 0.1580 - accuracy: 0.9515 - val_loss: 0.0525 - val_accuracy: 0.9823\n",
            "Epoch 11/30\n",
            "981/981 [==============================] - 96s 98ms/step - loss: 0.1483 - accuracy: 0.9551 - val_loss: 0.0616 - val_accuracy: 0.9804\n",
            "Epoch 12/30\n",
            "981/981 [==============================] - 97s 99ms/step - loss: 0.1266 - accuracy: 0.9599 - val_loss: 0.0491 - val_accuracy: 0.9825\n",
            "Epoch 13/30\n",
            "981/981 [==============================] - 98s 100ms/step - loss: 0.1271 - accuracy: 0.9607 - val_loss: 0.0866 - val_accuracy: 0.9733\n",
            "Epoch 14/30\n",
            "981/981 [==============================] - 98s 100ms/step - loss: 0.1292 - accuracy: 0.9614 - val_loss: 0.0438 - val_accuracy: 0.9855\n",
            "Epoch 15/30\n",
            "981/981 [==============================] - 98s 100ms/step - loss: 0.1180 - accuracy: 0.9646 - val_loss: 0.0411 - val_accuracy: 0.9874\n",
            "Epoch 16/30\n",
            "981/981 [==============================] - 98s 99ms/step - loss: 0.1134 - accuracy: 0.9662 - val_loss: 0.0506 - val_accuracy: 0.9830\n",
            "Epoch 17/30\n",
            "981/981 [==============================] - 97s 99ms/step - loss: 0.1099 - accuracy: 0.9675 - val_loss: 0.0457 - val_accuracy: 0.9861\n",
            "Epoch 18/30\n",
            "981/981 [==============================] - 99s 101ms/step - loss: 0.1073 - accuracy: 0.9673 - val_loss: 0.0388 - val_accuracy: 0.9861\n",
            "Epoch 19/30\n",
            "981/981 [==============================] - 97s 99ms/step - loss: 0.1031 - accuracy: 0.9677 - val_loss: 0.0398 - val_accuracy: 0.9874\n",
            "Epoch 20/30\n",
            "981/981 [==============================] - 98s 100ms/step - loss: 0.0999 - accuracy: 0.9698 - val_loss: 0.0335 - val_accuracy: 0.9893\n",
            "Epoch 21/30\n",
            "981/981 [==============================] - 98s 99ms/step - loss: 0.1014 - accuracy: 0.9696 - val_loss: 0.0330 - val_accuracy: 0.9901\n",
            "Epoch 22/30\n",
            "981/981 [==============================] - 97s 99ms/step - loss: 0.1012 - accuracy: 0.9690 - val_loss: 0.0391 - val_accuracy: 0.9876\n",
            "Epoch 23/30\n",
            "981/981 [==============================] - 96s 98ms/step - loss: 0.0822 - accuracy: 0.9745 - val_loss: 0.0294 - val_accuracy: 0.9908\n",
            "Epoch 24/30\n",
            "981/981 [==============================] - 95s 97ms/step - loss: 0.0831 - accuracy: 0.9755 - val_loss: 0.0289 - val_accuracy: 0.9908\n",
            "Epoch 25/30\n",
            "981/981 [==============================] - 102s 104ms/step - loss: 0.0915 - accuracy: 0.9730 - val_loss: 0.0341 - val_accuracy: 0.9903\n",
            "Epoch 26/30\n",
            "981/981 [==============================] - 96s 98ms/step - loss: 0.0905 - accuracy: 0.9724 - val_loss: 0.0408 - val_accuracy: 0.9871\n",
            "Epoch 27/30\n",
            "981/981 [==============================] - 95s 97ms/step - loss: 0.0764 - accuracy: 0.9781 - val_loss: 0.0356 - val_accuracy: 0.9884\n",
            "Epoch 28/30\n",
            "981/981 [==============================] - 95s 97ms/step - loss: 0.0821 - accuracy: 0.9755 - val_loss: 0.0351 - val_accuracy: 0.9903\n",
            "Epoch 29/30\n",
            "981/981 [==============================] - 99s 101ms/step - loss: 0.0786 - accuracy: 0.9758 - val_loss: 0.0369 - val_accuracy: 0.9890\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.History at 0x7d13583095a0>"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.save(\"mymodel.h5\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NhUazwqwvnvj",
        "outputId": "8853a2da-789f-48da-f6fa-7fa365b77864"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3103: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n",
            "  saving_api.save_model(\n"
          ]
        }
      ]
    }
  ]
}